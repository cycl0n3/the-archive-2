<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.classicmodels</groupId>
    <artifactId>DeclarativeXMLDatabase</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>

    <name>DeclarativeXMLDatabase</name>
  
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.5.7</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        
        <java.version>17</java.version>                
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        
        <jooq.version>3.16.2</jooq.version>       
        <codehaus.mojo.version>1.0.0</codehaus.mojo.version>              
        <jakarta.validation>3.0.1</jakarta.validation>
        
        <!-- property used as a schema version provider -->
        <schema.version>1</schema.version>
    </properties>

    <dependencies>        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>        
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq</artifactId>       
            <version>${jooq.version}</version>  
        </dependency>                          
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
            <version>${jakarta.validation}</version>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>             
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>           
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>                
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>        
                <configuration>
                    <compilerArgs>
                        <arg>--enable-preview</arg>
                    </compilerArgs>
                </configuration>
            </plugin>            
            <plugin>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>                   
                <executions>
                    <execution>
                        <id>generate-for-postgresql</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>                                  
                        <configuration xmlns="http://www.jooq.org/xsd/jooq-codegen-3.16.0.xsd">
                            <generator>

                                <!-- The default code generator. 
                                     You can override this one, to generate your own code style.
                                     
                                Supported generators:                                
                                - org.jooq.codegen.JavaGenerator
                                - org.jooq.codegen.ScalaGenerator
                                - org.jooq.codegen.KotlinGenerator
                                
                                Defaults to org.jooq.codegen.JavaGenerator -->
                                <name>org.jooq.codegen.JavaGenerator</name>

                                <database>
                                    <!-- Rely on jOOQ XML Database API -->
                                    <name>org.jooq.meta.xml.XMLDatabase</name>
                                                                                                            
                                    <properties>                                                    
                                        <!-- Use any of the SQLDialect values here -->
                                        <property>
                                            <key>dialect</key>
                                            <value>POSTGRES</value>
                                        </property>
            
                                        <!-- Specify the location of your database file -->
                                        <property>
                                            <key>xmlFile</key>
                                            <value>./../../../../../db/migration/xml/postgresql/sql.xml</value>
                                        </property>
                                    </properties>                                                
                                                 
                                    <!-- All elements that are generated from your schema
                                    (A Java regular expression. Use the pipe to separate several expressions)
                                    Watch out for case-sensitivity. Depending on your database, this might be important! 
                                    You can create case-insensitive regular expressions using this syntax: (?i:expr).
                                    Whitespace is ignored and comments are possible. -->       
                                    <includes>.*</includes>                                                                                                                                                                                                           
                                    
                                    <!-- Schema version provider -->            
                                    <schemaVersionProvider>${schema.version}</schemaVersionProvider>                                    
                                </database>
                                
                                <!-- Rename the generated POJOs and DAOs classes -->                      
                                <strategy>
                                    <matchers>
                                        <tables>
                                            <table>
                                                <pojoClass>                                                         
                                                    <expression>JOOQ_$0</expression>
                                                    <transform>PASCAL</transform>                                                                                      
                                                </pojoClass>
                                                <daoClass>
                                                    <expression>$0_Repository</expression>
                                                    <transform>PASCAL</transform>                                                                                      
                                                </daoClass>
                                            </table>
                                        </tables>
                                    </matchers>
                                </strategy>
                                
                                <!-- jOOQ will generate POJOs and DAOs on our behalf -->
                                <generate>
                                    <daos>true</daos>                                   
                                    <validationAnnotations>true</validationAnnotations>                            
                                    <springAnnotations>true</springAnnotations>   
                                </generate>
                                
                                <target>
                                    <!-- The destination package of your generated classes (within the destination directory).
                                    jOOQ may append the schema name to this package if generating multiple schemas,
                                    e.g. org.jooq.your.packagename.schema1
                                    org.jooq.your.packagename.schema2 -->
                                    <packageName>jooq.generated</packageName>
            
                                    <!-- The destination directory of your generated classes. Using Maven directory layout here. -->
                                    <directory>target/generated-sources</directory>
                                </target>
                            </generator>
                        </configuration>
                    </execution>
                </executions> 
            </plugin>
        </plugins>
    </build>
</project>
