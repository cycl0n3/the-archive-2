plugins {
    id 'application'
    id 'org.springframework.boot' version '2.5.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.flywaydb.flyway' version '8.2.0'
    id 'nu.studer.jooq' version '6.0.1'
    id 'java'
}

def schemaVersion = '1'

group = 'com.classicmodels'
version = '1.0'
sourceCompatibility = '17'
targetCompatibility = '17'

application {
    mainClass = 'com.classicmodels.MainApplication' 
}

repositories {
    mavenLocal()
    mavenCentral()   
}

dependencies {            
    jooqGenerator 'com.oracle.database.jdbc:ojdbc8'
    jooqGenerator 'com.oracle.database.jdbc:ucp'
    jooqGenerator 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'   
    implementation 'com.oracle.database.jdbc:ojdbc8'
    implementation 'com.oracle.database.jdbc:ucp'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.1'
    implementation 'org.flywaydb:flyway-core'
}

processResources {
    filesMatching("**/application.properties") {
        expand( project.properties )
    }
}

flyway {
    driver = project.properties['driverClassName']
    url = project.properties['url']
    user = project.properties['username']
    password = project.properties['password']    
    locations = ['filesystem:./../../../../../db/migration/min/oracle']
    baselineOnMigrate = true
}

jooq {
    version = project.properties['jooq']
    edition = nu.studer.gradle.jooq.JooqEdition.TRIAL_JAVA_8

    configurations {
        main {
            generateSchemaSourceOnCompilation = true  // default (can be omitted)                        
                    
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                
                generator {
                    // The default code generator. 
                    // You can override this one, to generate your own code style.
                                     
                    // Supported generators:                                
                    //  - org.jooq.codegen.JavaGenerator
                    //  - org.jooq.codegen.ScalaGenerator
                    //  - org.jooq.codegen.KotlinGenerator
                           
                    // Defaults to org.jooq.codegen.JavaGenerator
                    name = 'org.jooq.codegen.JavaGenerator' 
                    
                    database {
                        // Rely on jOOQ XML Database API
                        name = 'org.jooq.meta.xml.XMLDatabase' 
                        
                        properties {

                            // Use any of the SQLDialect values here
                            property {
                                key = 'dialect'
                                value = 'ORACLE'
                            }

                            // Specify the location of your database file
                            property {
                                key = 'xmlFile'
                                value = './../../../../../db/migration/xml/oracle/sql.xml'
                            }
                        }
                        
                        // All elements that are generated from your schema
                        // (A Java regular expression. Use the pipe to separate several expressions)
                        // Watch out for case-sensitivity. Depending on your database, this might be important! 
                        // You can create case-insensitive regular expressions using this syntax: (?i:expr).
                        // Whitespace is ignored and comments are possible.
                        includes = '.*'

                        // Schema version provider
                        schemaVersionProvider=schemaVersion                        
                    }                                        
                    
                    strategy {
                        matchers {
                            tables {
                                table {
                                    pojoClass{
                                        expression = 'JOOQ_$0'
                                        transform = 'PASCAL'
                                    }
                                    daoClass{
                                        expression = '$0_Repository'
                                        transform = 'PASCAL'
                                    }
                                }
                            }
                        }
                    }                                        
                    
                    generate {  
                        daos = true
                        validationAnnotations = true
                        springAnnotations = true
                    }
                    
                    target {
                        packageName = 'jooq.generated'
                        directory = 'build/generated-sources'
                    }
                }
            }
        }
    }
}

tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('flywayMigrate')

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree('${rootDir}/../../../../../db/migration/min/oracle'))
    .withPropertyName('migrations')
    .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds and build caching
    allInputsDeclared = true
    outputs.cacheIf { true }
}
