plugins {
    id 'application'
    id 'org.springframework.boot' version '2.5.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.flywaydb.flyway' version '8.2.0'
    id 'nu.studer.jooq' version '6.0.1'
    id 'java'
}

def schemaVersion = '1'

group = 'com.classicmodels'
version = '1.0'
sourceCompatibility = '17'
targetCompatibility = '17'

application {
    mainClass = 'com.classicmodels.MainApplication' 
}

repositories {
    mavenLocal()
    mavenCentral()   
}

dependencies {                
    jooqGenerator 'org.jooq:jooq-meta-extensions-hibernate'
    jooqGenerator 'javax.persistence:javax.persistence-api'
    jooqGenerator 'javax.validation:validation-api'
    jooqGenerator project(':entities')	
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'    
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation project(':entities')	
    implementation 'mysql:mysql-connector-java'
    implementation 'org.flywaydb:flyway-core'
}

processResources {
    filesMatching("**/application.properties") {
        expand( project.properties )
    }
}

flyway {
    driver = project.properties['driverClassName']
    url = project.properties['url']
    user = project.properties['username']
    password = project.properties['password']    
    locations = ['filesystem:./../../../../../../db/migration/min/mysql']
}

jooq {
    version = project.properties['jooq']
    edition = nu.studer.gradle.jooq.JooqEdition.OSS

    configurations {
        main {
            generateSchemaSourceOnCompilation = true  // default (can be omitted)                        
                    
            generationTool {

                logging = org.jooq.meta.jaxb.Logging.WARN

                generator {
                    // The default code generator. 
                    // You can override this one, to generate your own code style.
                                     
                    // Supported generators:                                
                    //  - org.jooq.codegen.JavaGenerator
                    //  - org.jooq.codegen.ScalaGenerator
                    //  - org.jooq.codegen.KotlinGenerator
                           
                    // Defaults to org.jooq.codegen.JavaGenerator
                    name = 'org.jooq.codegen.JavaGenerator' 
                    
                    database {
                        // Rely on jOOQ JPA Database API
                        name = 'org.jooq.meta.extensions.jpa.JPADatabase' 

                        // H2 database schema
                        inputSchema = 'PUBLIC'
                        
                        properties {

                            // The current versions of jOOQ use Hibernate behind the scenes 
                            // to generate an in-memory H2 database from which to reverse engineer 
                            // jOOQ code. In order to influence Hibernate's schema generation, 
                            // Hibernate specific flags can be passed to MetadataSources. 
                            // All properties that are prefixed with hibernate. 
                            // or javax.persistence. will be passed along to Hibernate. -->
                            property {
                                key = 'hibernate.physical_naming_strategy'
                                value = 'org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
                            }

                            // A comma separated list of Java packages, that contain your entities
                            property {
                                key = 'packages'
                                value = 'com.classicmodels.entity'
                            }

                            // Whether JPA 2.1 AttributeConverters should be auto-mapped to jOOQ Converters.
                            // Custom <forcedType/> configurations will have a higher priority than these auto-mapped converters. 
                            // This defaults to true.
                            property {
                                key = 'useAttributeConverters'
                                value = 'true'
                            }

                            // The default schema for unqualified objects:
  
                            // - public: all unqualified objects are located in the PUBLIC (upper case) schema
                            // - none: all unqualified objects are located in the default schema (default) 
                
                            // This configuration can be overridden with the schema mapping feature
                            property {
                                key = 'unqualifiedSchema'
                                value = 'none'
                            }
                        }
                                  
                        // All elements that are generated from your schema
                        // (A Java regular expression. Use the pipe to separate several expressions)
                        // Watch out for case-sensitivity. Depending on your database, this might be important! 
                        // You can create case-insensitive regular expressions using this syntax: (?i:expr).
                        // Whitespace is ignored and comments are possible.
                        includes = '.*' 

                        // Schema version provider
                        schemaVersionProvider = schemaVersion
                    }                                        
                    
                    strategy {
                        matchers {
                            tables {
                                table {
                                    pojoClass{
                                        expression = 'JOOQ_$0'
                                        transform = 'PASCAL'
                                    }
                                    daoClass{
                                        expression = '$0_Repository'
                                        transform = 'PASCAL'
                                    }
                                }
                            }
                        }
                    }                                        
                    
                    generate {  
                        daos = true
                        validationAnnotations = true
                        springAnnotations = true
                    }
                    
                    target {
                        packageName = 'jooq.generated'
                        directory = 'build/generated-sources'
                    }
                }
            }
        }
    }
}

// jOOQ generator run after Flyway but it doesn't depend on it!
tasks.named('generateJooq').configure {
    // ensure database schema has been prepared by Flyway before generating the jOOQ sources
    dependsOn tasks.named('flywayMigrate')

    // declare Flyway migration scripts as inputs on the jOOQ task
    inputs.files(fileTree('${rootDir}/../../../../../../db/migration/min/mysql'))
    .withPropertyName('migrations')
    .withPathSensitivity(PathSensitivity.RELATIVE)

    // make jOOQ task participate in incremental builds and build caching
    allInputsDeclared = true
    outputs.cacheIf { true }
}
