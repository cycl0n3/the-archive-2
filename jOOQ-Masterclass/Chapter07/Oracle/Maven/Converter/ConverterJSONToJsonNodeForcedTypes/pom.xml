<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.classicmodels</groupId>
    <artifactId>ConverterJSONToJsonNodeForcedTypes</artifactId>
    <version>1.0</version>
    <packaging>jar</packaging>

    <name>ConverterJSONToJsonNodeForcedTypes</name>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.5.7</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        
        <java.version>17</java.version>                
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
                
        <jooq.version>3.16.2</jooq.version>  
        <codehaus.mojo.version>1.0.0</codehaus.mojo.version>              
    </properties>

    <dependencies>        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
        </dependency>        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>        
        <dependency>
            <groupId>org.jooq.trial-java-8</groupId>
            <artifactId>jooq</artifactId>         
            <version>${jooq.version}</version>
        </dependency>              
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>            
        </dependency>
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ucp</artifactId>            
        </dependency>       
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.sun.xml.bind</groupId>
            <artifactId>jaxb-impl</artifactId>
            <version>2.3.0</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>                
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>    
                <configuration>
                    <compilerArgs>
                        <arg>--enable-preview</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>                
                <version>${codehaus.mojo.version}</version>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>                                
                                <file>src/main/resources/application.properties</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin> 
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>                                  
                <executions>
                    <execution>                        
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>migrate</goal>
                        </goals>
                    </execution>
                </executions>                
                <configuration>  
                    <driver>${spring.datasource.driverClassName}</driver>
                    <url>${spring.datasource.url}</url>
                    <user>${spring.datasource.username}</user>
                    <password>${spring.datasource.password}</password>                                          
                    <locations>
                        <location>filesystem:./../../../../../db/migration/dev/oracle</location>                        
                    </locations>          
                    <baselineOnMigrate>true</baselineOnMigrate>         
                </configuration>                
            </plugin>
            <plugin>
                <groupId>org.jooq.trial-java-8</groupId>
                <artifactId>jooq-codegen-maven</artifactId>  
                <version>${jooq.version}</version>             
                <executions>
                    <execution>
                        <id>generate-for-oracle</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>                                  
                        <configuration xmlns="http://www.jooq.org/xsd/jooq-codegen-3.16.0.xsd">                                                 

                            <!-- Configure the database connection here -->
                            <jdbc>
                                <driver>${spring.datasource.driverClassName}</driver>
                                <url>${spring.datasource.url}</url>
                                <user>${spring.datasource.username}</user>
                                <password>${spring.datasource.password}</password>                        
                            </jdbc>                                        

                            <generator>
                                <!-- The default code generator. 
                                     You can override this one, to generate your own code style.
                                     
                                Supported generators:                                
                                - org.jooq.codegen.JavaGenerator
                                - org.jooq.codegen.ScalaGenerator
                                - org.jooq.codegen.KotlinGenerator
                                
                                Defaults to org.jooq.codegen.JavaGenerator -->
                                <name>org.jooq.codegen.JavaGenerator</name>
        
                                <database>  
                                    <forcedTypes>
                                        <forcedType>

                                            <!-- Specify the Java type of your custom type. This corresponds to the Converter's <U> type. -->
                                            <userType>com.fasterxml.jackson.databind.JsonNode</userType>

                                            <!-- Associate that custom type with your converter. -->
                                            <converter>com.classicmodels.converter.JsonConverter</converter>

                                            <!-- A Java regex matching fully-qualified columns, attributes, parameters. Use the pipe to separate several expressions.
                                            If provided, both "includeExpression" and "includeTypes" must match. -->
                                            <!-- single field expressed as schema\table\field -->
                                            <includeExpression>CLASSICMODELS\.MANAGER\.MANAGER_DETAIL</includeExpression>
                                            
                                            <!-- All 'MANAGER_DETAIL' fields in any 'MANAGER' table, no matter the schema -->
                                            <!-- <includeExpression>.*\.MANAGER\.MANAGER_DETAIL</includeExpression> -->
                                            
                                            <!-- All 'MANAGER_DETAIL' fields, no matter the schema and the table -->
                                            <!-- <includeExpression>.*\.MANAGER_DETAIL</includeExpression> -->
                                            
                                            <!-- All fields containing 'MANAGER_' -->
                                            <!-- <includeExpression>.*\.MANAGER_.*</includeExpression> -->
                                            
                                            <!-- Case-insensitive expressions -->
                                            <!-- <includeExpression>(?i:.*\.manager\.manager_detail)</includeExpression> -->
                                            <!-- <includeExpression>(?i:classicmodels\.manager\.manager_detail)</includeExpression> -->
                                            
                                            <!-- A Java regex matching data types to be forced to have this type.
                             
                                            Data types may be reported by your database as:
                                            - NUMBER              regexp suggestion: NUMBER
                                            - NUMBER(5)           regexp suggestion: NUMBER\(5\)
                                            - NUMBER(5, 2)        regexp suggestion: NUMBER\(5,\s*2\)
                                            - any other form.
                             
                                            It is thus recommended to use defensive regexes for types.
                             
                                            If provided, both "includeExpression" and "includeTypes" must match. -->                                            

                                            <!-- Any type -->
                                            <!-- <includeTypes>.*</includeTypes> -->

                                            <!-- The type -->
                                            <includeTypes>JSON</includeTypes>

                                            <!-- This exclude predicate is a regular expression which is matched 
                                            against the name of the definition's type (provided that it has one);
                                            any definition's type name matching the regular expression will be 
                                            considered not matching this forced type -->
                                            <excludeTypes></excludeTypes>
                                    
                                            <!-- An SQL query returning all (qualified or unqualified) object 
                                            names which should be considered to match this forced type -->
                                            <sql></sql>
                                                                                        
                                            <!-- Force a type depending on data type nullability. Default is ALL.
                                      
                                            - ALL - Force a type regardless of whether data type is nullable or not (default)
                                            - NULL - Force a type only when data type is nullable
                                            - NOT_NULL - Force a type only when data type is not null -->
                                            <nullability>ALL</nullability>
          
                                            <!-- Force a type on ALL or specific object types, including 
                                            ATTRIBUTE, COLUMN, ELEMENT, PARAMETER, SEQUENCE -->
                                            <objectType>ALL</objectType>
                                        </forcedType>
                                    </forcedTypes>  
                                                              
                                    <!-- The database type. The format here is:
                                    org.jooq.meta.[database].[database]Database -->
                                    <name>org.jooq.meta.oracle.OracleDatabase</name>
            
                                    <!-- The database schema (or in the absence of schema support, in your RDBMS this
                                    can be the owner, user, database name) to be generated. This cannot be combined with the <schemata/> element.                                     
                                    If <inputSchema/> is missing then all schemas will be considered. -->
                                    <inputSchema>CLASSICMODELS</inputSchema>                 
            
                                    <!-- All elements that are generated from your schema
                                    (A Java regular expression. Use the pipe to separate several expressions)
                                    Watch out for case-sensitivity. Depending on your database, this might be important! 
                                    You can create case-insensitive regular expressions using this syntax: (?i:expr).
                                    Whitespace is ignored and comments are possible. -->       
                                    <includes>.*</includes>            
                                    
                                    <!-- All elements that are excluded from your schema
                                    (A Java regular expression. Use the pipe to separate several expressions).
                                    Excludes match before includes, i.e. excludes have a higher priority. -->
                                    <excludes>
                                        flyway_schema_history | DEPARTMENT_PKG | GET_.*
                                        | CARD_COMMISSION | PRODUCT_OF_PRODUCT_LINE
                                        | REFRESH_TOP3_PRODUCT | SALE_PRICE | SECOND_MAX
                                        | SET_COUNTER | SWAP | TOP_THREE_SALES_PER_EMPLOYEE
                                        | EVALUATION_CRITERIA | SECOND_MAX_IMPL | TABLE_.*_OBJ
                                        | .*_MASTER | BGT | .*_ARR | TABLE_POPL | TABLE_RES
                                    </excludes>

                                    <!-- Schema version provider -->            
                                    <schemaVersionProvider>SELECT MAX("version") FROM "flyway_schema_history"</schemaVersionProvider>
                                               
                                    <!-- Give enough time to jOOQ to trigger the queries needed for generating sources 
                                    (default is 5 seconds) -->
                                    <logSlowQueriesAfterSeconds>20</logSlowQueriesAfterSeconds>
                                </database>

                                <target>
                                    <!-- The destination package of your generated classes (within the destination directory).
                                 jOOQ may append the schema name to this package if generating multiple schemas,
                                    e.g. org.jooq.your.packagename.schema1
                                    org.jooq.your.packagename.schema2 -->                                    
                                    <packageName>jooq.generated</packageName>
            
                                    <!-- The destination directory of your generated classes. Using Maven directory layout here -->
                                    <directory>target/generated-sources</directory>
                                </target>
                            </generator>    
                                                                                              
                            <!-- A boolean property (or constant) can be specified here to tell the plugin not to do anything -->
                            <skip>false</skip>

                            <!--Additional Maven-specific flags -->
                            <!-- ============================== -->
                            <!-- Instead of providing an inline configuration here, you can specify an external XML configuration file here -->
                            <!-- <configurationFile>${externalfile}</configurationFile> -->
    
                            <!-- Alternatively, you can provide several external configuration files. These will be merged by using
                            Maven's combine.children="append" policy. -->
                            <!--
                            <configurationFiles>
                                <configurationFile>${file1}</configurationFile>
                                <configurationFile>${file2}</configurationFile>
                                <configurationFile>...</configurationFile>
                            </configurationFiles>                                        
                            -->
                        </configuration>
                    </execution>
                </executions> 
            </plugin>
        </plugins>
    </build>
</project>