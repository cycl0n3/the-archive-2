/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Scala application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 */

plugins {
    // Apply the scala Plugin to add support for Scala.
    scala

    war

    id("org.springframework.boot") version "3.0.5"

    id("io.spring.dependency-management") version "1.1.0"
}

java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-web")

    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test")

    providedRuntime("org.mariadb.jdbc:mariadb-java-client")

    //implementation("io.jsonwebtoken:jjwt-api:0.11.5")
    //providedRuntime("io.jsonwebtoken:jjwt-impl:0.11.5")
    //providedRuntime("io.jsonwebtoken:jjwt-jackson:0.11.5")

    implementation("org.apache.poi:poi:5.2.3")
    implementation("org.apache.poi:poi-ooxml:5.2.3")

    implementation("org.apache.commons:commons-lang3:3.7")

    implementation("org.scala-lang:scala-library:2.13.10")
    testRuntimeOnly("org.scala-lang.modules:scala-xml_2.13:1.2.0")
    implementation("com.google.guava:guava:31.1-jre")

    // Use Scalatest for testing our library
    testImplementation("junit:junit:4.13.2")
    testImplementation("org.scalatest:scalatest_2.13:3.2.15")
    testImplementation("org.scalatestplus:junit-4-13_2.13:3.2.15.0")

    implementation("com.auth0:java-jwt:4.2.2")

    compileOnly("org.projectlombok:lombok:1.18.26")
    annotationProcessor("org.projectlombok:lombok:1.18.26")

    testCompileOnly("org.projectlombok:lombok:1.18.26")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.26")

    implementation("org.mapstruct:mapstruct:1.5.5.Final")
    annotationProcessor("org.mapstruct:mapstruct-processor:1.5.5.Final")
}

tasks.withType<Test> {
    useJUnitPlatform()
}

tasks.named<AbstractCompile>("compileScala") {
    // Scala only needs the declared dependencies
    // (and not longer the output of compileJava)
    //classpath = sourceSets.main.get().compileClasspath
    classpath += files(sourceSets.main.get().java.classesDirectory)
}

tasks.named<AbstractCompile>("compileJava") {
    // Java also depends on the result of Scala compilation
    // (which automatically makes it depend on compileScala)
    classpath = sourceSets.main.get().compileClasspath
    //classpath += files(sourceSets.main.get().scala.classesDirectory)
}
